import React, { useState, useEffect } from 'react';
import axios from 'axios';
import ProductCard from './ProductCard';
import { searchProductsAuto } from '../services/productService';
import { fetchManualSortedProducts } from '../services/productService';
import './styles/productList.css';

type ProductListProps = {
  selectedCategory: number | null;
  page: number;
  setPage: React.Dispatch<React.SetStateAction<number>>;
};

const pageSize = 10; 

const ProductList: React.FC<ProductListProps> = ({ selectedCategory, page, setPage }) => {
  const [products, setProducts] = useState<any[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [searchTerm, setSearchTerm] = useState<string>('');
  const [orderBy, setOrderBy] = useState<string>('price');
  const [totalCount, setTotalCount] = useState<number>(0);

  const fetchProducts = async () => {
    setLoading(true);
    try {
      if (searchTerm.trim() !== "") {
        // —Ç—É—Ç –æ—Å—Ç–∞–≤–ª—è–µ–º auto-–ø–æ–∏—Å–∫
        const result = await searchProductsAuto(searchTerm);
        setProducts(result.results); // –µ—Å–ª–∏ paginated
        setTotalCount(result.count);
      } else {
        // üëá —Ä—É—á–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        const result = await fetchManualSortedProducts(orderBy,page);
        setProducts(result.results);
        setTotalCount(result.count);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤:', error);
    } finally {
      setLoading(false);
    }
  };


  useEffect(() => {
    fetchProducts();
  }, [page, searchTerm, orderBy, selectedCategory]);

  const totalPages = Math.ceil(totalCount / pageSize);

  return (
    <div className="product-list">
      <div className="filters">
        <input
          type="text"
          value={searchTerm}
          onChange={(e) => {
            setSearchTerm(e.target.value);
            setPage(1); 
          }}
          placeholder="–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤"
        />
        <select
          value={orderBy}
          onChange={(e) => setOrderBy(e.target.value)}
        >
          <option value="price_asc">–°–Ω–∞—á–∞–ª–∞ –¥–µ—à—ë–≤—ã–µ</option>
          <option value="price_desc">–°–Ω–∞—á–∞–ª–∞ –¥–æ—Ä–æ–≥–∏–µ</option>
          <option value="name_asc">–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é A-Z</option>
          <option value="name_desc">–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é Z-A</option>
        </select>
      </div>

      {/* –¢–æ–≤–∞—Ä—ã */}
      {loading ? (
        <div className="text-center">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
      ) : products.length === 0 ? (
        <div className="text-center">–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤</div>
      ) : (
        <div className="products-grid">
          {products.map((product) => (
            <ProductCard key={product.id} {...product} />
          ))}
        </div>
      )}

      {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
      <div className="pagination">
        <button
          onClick={() => setPage((prev) => Math.max(prev - 1, 1))}
          disabled={page === 1}
        >
          –ù–∞–∑–∞–¥
        </button>
        <span>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}</span>
        <button
          onClick={() => setPage((prev) => prev + 1)}
          disabled={page >= totalPages}
        >
          –í–ø–µ—Ä—ë–¥
        </button>
      </div>
    </div>
  );
};

export default ProductList;
